#!/usr/bin/env node

var program = require( 'commander' )
  , Promise = require( 'bluebird' )
  , path    = require( 'path' )
  , fs      = require( 'fs' )
  , _       = require( 'lodash' )
  , async   = require( 'async' )
  , lib     = require( path.join( __dirname, '..', 'index' ) );

program.version( lib.pkg.version )
  .usage( '[options] [modules ...]' )
  .option( '-v, --versions [versions]', 'Install a specific package version.' )

program.on( '--help', function ( ) {
  console.log( '  Examples:' );
  console.log( '    clever install clever-background-tasks' );
  console.log( '    clever install clever-background-tasks@0.0.1' );
  console.log( '' );
} );

program.parse( process.argv );

Promise.longStackTraces( );

/**
 * Launches the installation process
 * Checks for seed folders depending on CWD
 * Separates which packages we need via Bower and NPM
 * Installs the NPM/Bower modules within the seeds
 *
 * @param  {Array} repos
 * @return {Promise}
 * @api private
 */

function install ( repos ) {
  var def = Promise.defer( );

  lib.project.useUtils( )
  .spread( function ( locations, useNPM, useBower ) {
    return lib.search.aggregate( repos ).spread( function ( npm, bower ) {
      return [ locations, npm, bower ];
    } );
  } )
  .spread( function ( locations, npm, bower ) {
    var actions = [ ]
     // todo: make this into a function...
     // todo: also make packages.locations() a prototype for .isBackend() utility functions, etc.
      , backend = _.find( locations, function ( location ) {
        return location.name === "backend";
      } )
      , frontend = _.find( locations, function ( location ) {
        return location.name === "frontend";
      } );

    if (typeof backend === "undefined" && frontend === "undefined") {
      lib.utils.fail( 'Couldn\'t find a CleverStack seed. Please make sure that you\'re trying to install within your CleverStack project.' );
    }
    else if (npm.length < 1 && bower.length < 1) {
      lib.utils.fail( 'No modules to install, please make sure you\'re tring to install CleverStack compatible modules.' );
    }

    if (npm.length > 0) {
      actions.push( lib.packages.installWithNpm( backend, npm ) );
    }

    if (bower.length > 0) {
      actions.push( lib.packages.installWithBower( frontend, bower ) );
    }

    Promise.all( actions )
    .then( function ( ) {
      def.resolve( [ backend, frontend, npm, bower ] );
    } )
    .catch( function ( err ) {
      def.reject( err );
    } );
  } )
  .catch( function ( err ) {
    def.reject( err );
  } );

  return def.promise;
}

if (program.args.length < 1) {
  program.help( );
}

install( program.args )
.spread( function ( backendPath, frontendPath, npm, bower ) {
  if (npm.length > 0) {
    npm = npm.map( function ( n ) {
      return n.name;
    } );

    lib.utils.info( 'Installing any bundled dependencies if applicable... ');

    var walker = require( 'findit' )( path.join( backendPath.moduleDir, backendPath.modulePath ) )
      , dirs   = [ ];

    walker.on( 'directory', function ( dir, stat, stop ) {
      var _dir  = dir.split( path.sep );
      _dir      = _dir.pop( );

      if (_dir !== "modules") {
        if (npm.indexOf( _dir ) === -1) {
          return stop( );
        }

        dirs.push( dir );
      }
    } );

    walker.on( 'end', function ( ) {
      if (dirs.length > 0) {
        async.each( dirs, function ( dir, next ) {
          lib.project.installBundleDeps( dir, path.join( backendPath.moduleDir, backendPath.modulePath ) )
          .then( function ( ) {
            next( );
          } )
          .catch( function ( err ) {
            next( err );
          } );
        },
        function ( err ) {
          if (!!err) {
            lib.utils.fail( err );
          }
        } );
      }
    } );
  }
} )
.catch( function ( err ) {
  lib.utils.error( err );
} );
