#!/usr/bin/env node

var Promise = require( 'bluebird' )
  , program = require( 'commander' )
  , path    = require( 'path' )
  , mkdirp  = require( 'mkdirp' )
  , spawn   = require( 'win-spawn' )
  , fs      = require( 'fs' )
  , rimraf  = require( 'rimraf' )
  , async   = require( 'async' )
  , lib     = require( path.join( __dirname, '..', 'index' ) );

Promise.longStackTraces( );

program
  .version( lib.pkg.version );

program
  .command( '<project>' )
  .description( ' Creates a project named <project>' );

program.on( '--help', function ( ) {
  console.log( '  Examples:' );
  console.log( '    clever init my-project' );
  console.log( '    clever init project-frontend frontend' );
  console.log( '    clever init my-project-everything backend frontend' );
  console.log( '' );
  console.log( '  Installing specific versions:' );
  console.log( '    clever init my-project backend@<version>' );
  console.log( '    clever init my-project frontend@<version>' );
  console.log( '' );
} );

program.parse( process.argv );

var project = program.args[ 0 ]
  , args    = program.args.slice( 1 );

if (args.length < 1 || (args.indexOf( 'backend' ) === -1 && args.indexOf( 'frontend' ))) {
  args.push( 'backend' );
  args.push( 'frontend' );
}

var remotes = {
  backend:  'cleverstack-node-seed',
  frontend: 'cleverstack-angular-seed'
}

if (!project || project.toString( ).trim( ) === "") {
  program.help( );
}

var projectFolder = path.join( process.cwd( ), project );

if (fs.existsSync( projectFolder )) {
  lib.utils.fail( "Can't create project " + project + " due to a folder named " + project + " existing in " + process.cwd() );
}

var installArgs = [ ];
if (program.versions) {
  installArgs.push( '-v' );
  installArgs.push( program.versions );
}

if (program.fetch) {
  installArgs.push( '-f' );
}

/**
 * Installs bundleDependencies through lib.project.installBundledModules if applicable
 *
 * @param  {String} projectDir
 * @return {Promise}
 * @api private
 */

function installDeps ( projectDir ) {
  return new Promise( function ( res, rej ) {
    var pkg = require( path.join( projectDir, 'package.json' ) );

    if (!pkg.hasOwnProperty( 'bundledDependencies' ) || pkg.bundledDependencies.length < 1) {
      return res( );
    }

    lib.utils.info( 'Installing bundled dependencies...' );
    lib.project.installBundledModules( projectDir, pkg.bundledDependencies ).then( function ( ) {
      res( );
    } )
    .catch( rej );
  } );
}

/**
 * Writes a local.json file within projectDir
 * with the basic ORM values
 *
 * @param  {String} projectDir
 * @return {Promise}
 * @api private
 */

function writeLocalJSON ( projectDir ) {
  var def = Promise.defer( );

  lib.utils.info( 'Writing local config file...' );
  var localJSONFile = require( path.join( projectDir, 'config', 'local.example.json' ) );

  if (localJSONFile !== null) {
    localJSONFile['clever-orm'] = localJSONFile['clever-orm'] || {};
    localJSONFile['clever-orm'].db = localJSONFile['clever-orm'].db || {};

    [ 'username', 'password', 'database' ].forEach( function ( key ) {
      localJSONFile['clever-orm'].db[key] = localJSONFile['clever-orm'].db[key] || '';
    } );

    localJSONFile['clever-orm'].db.options = localJSONFile['clever-orm'].db.options || {};

    [ 'dialect', 'host', 'port' ].forEach( function ( key ) {
      localJSONFile['clever-orm'].db.options[key] = localJSONFile['clever-orm'].db.options[key] || '';
    } );
  }

  fs.writeFile( path.join( projectDir, 'config', 'local.json' ), JSON.stringify( localJSONFile, null, 2 ), function ( err ) {
    if (!!err) {
      return def.reject( err );
    }

    def.resolve( );
  } );

  return def.promise;
}

/**
 * Installs the cleverstack-node-seed as 'backend' and then writes
 * a local JSON file through writeLocalJSON()
 *
 * @return {Promise}
 * @api private
 */

function setupBackend ( ) {
  var def         = Promise.defer( )
    , projectDir  = path.join( projectFolder, 'backend' );

  if (args.indexOf( 'backend' ) !== -1) {
    mkdirp( projectDir, function ( err ) {
      if (!!err) {
        return def.reject( err );
      }

      var pkg = args[ args.indexOf( 'backend' ) ].split( '@' );

      lib.packages.get( {
        name: 'cleverstack-node-seed' + ( typeof pkg[ 1 ] !== "undefined" ? '@' + pkg[ 1 ] : '' ),
        owner: 'clevertech'
      }, projectDir )
      .then( function ( ) {
        writeLocalJSON( projectDir )
        .then( function ( ) {
          return installDeps( projectDir )
        } )
        .then( function ( ) {
          def.resolve( );
        } )
        .catch( function ( err ) {
          def.reject( err );
        } );
      } )
      .catch( function ( err ) {
        def.reject( err );
      } );
    } );
  } else {
    process.nextTick( function( ) {
      return def.resolve( );
    } );
  }

  return def.promise;
}

/**
 * Installs cleverstack-angular-seed as 'frontend'
 *
 * @return {Promise}
 * @api private
 */

function setupFrontend( ) {
  var def         = Promise.defer( )
    , projectDir  = path.join( projectFolder, 'frontend' );

  mkdirp( path.resolve( projectDir ), function ( err ) {
    if (!!err) {
      return def.reject( err );
    }

    var pkg = args[ args.indexOf( 'frontend' ) ].split( '@' );

    lib.packages.get( { name: 'cleverstack-angular-seed' + ( typeof pkg[ 1 ] !== "undefined" ? '@' + pkg[ 1 ] : '' ), owner: 'clevertech' }, projectDir )
    .then( function ( ) {
      def.resolve( );
    } )
    .catch( function ( err ) {
      def.reject( err );
    } );
  } );

  return def.promise;
}

/**
 * Helper function for running clever-install if there are modules to install
 *
 * @param  {String[]} modules
 * @return {Promise}
 * @api private
 */

function setupModules( modules ) {
  var def   = Promise.defer( )
    , proc  = spawn( path.join( __dirname, 'clever-install' ), modules, { cwd: projectFolder, stdio: 'inherit' } );

  proc.on( 'close', function ( ) {
    def.resolve( );
  } );

  return def.promise;
}

/**
 * Installs Bower and NPM (including modules within the seeds) packages
 *
 * @return {Promise}
 */

function setupPackages( ) {
  var def = Promise.defer( );

  async.eachSeries( fs.readdirSync( path.resolve( path.join( projectFolder ) ) ), function ( p, fn ) {
    var _path = path.resolve( path.join( projectFolder, p ) );

    // process.chdir( _path );

    lib.utils.info( 'Installing NPM packages for ' + _path );
    var proc = spawn( 'npm', [ 'install' ], { cwd: _path } )
      , err = '';

    proc.stderr.on('data', function ( data ) {
      err += data + '';
    } );

    proc.on( 'close', function ( code ) {
      if (code !== 0) {
        return fn( err );
      }

      lib.utils.success( 'Finished installing NPM packages for ' + _path );

      var modulesFolder = path.resolve( path.join( projectFolder, p, 'modules' ) )
        , modules = [];

      if (fs.existsSync( modulesFolder )) {
        modules = fs.readdirSync( modulesFolder );
        lib.utils.warn( 'Installing module NPMs for ' + _path );
      }

      async.eachSeries( modules, function ( m, next ) {
        lib.project.installModule( {
          moduleDir: modulesFolder,
          modulePath: ''
        }, path.resolve( path.join( modulesFolder, m ) ) )
        .then( function ( ) {
          next( );
        } )
        .catch( function ( err ) {
          next( err );
        } );
      },
      function ( err ) {
        if (!!err) {
          return fn( err );
        }

        if (modules.length > 0) {
          lib.utils.success( 'Finished installing module NPMs' );
        }

        var bowerPath = path.resolve( path.join( projectFolder, p, 'bower.json' ) );
        process.chdir( _path );

        // backend folder?
        if (!fs.existsSync( bowerPath ) ) {
          return fn( );
        }

        // todo: Separate this into it's own function
        lib.utils.info( 'Installing bower packages for ' + _path);

        var err  = ''
          , proc = spawn( 'bower', [ 'install' ], { cwd: _path } );

        proc.stderr.on( 'data', function ( data ) {
          err += data + '';
        } );

        proc.on( 'close', function ( code ) {
          if (code !== 0) {
            return fn( err );
          }

          lib.utils.success( 'Finished installing bower packages.' );

          //todo: Separate this into it's own function
          lib.utils.info( 'Building frontend' );
          var buildProc = spawn( 'grunt', [ 'build' ], { cwd: _path } )
            , buildErr  = '';

          buildProc.stderr.on( 'data', function ( data ) {
            buildErr += data + '';
          } );

          buildProc.on( 'close', function ( code ) {
            if (code !== 0) {
              return fn( err );
            }

            lib.utils.success( 'Finished building frontend' );
            fn( );
          } );
        } );
      } );
    } );
  },
  function ( err ) {
    if (!!err) {
      return def.reject( err );
    }

    def.resolve( );
  } );

  return def.promise;
}

Promise.all( args )
.then( function ( modules ) {
  var def = Promise.defer( );

  lib.utils.info( 'Creating ' + project + ' folder in ' + process.cwd( ) + '...' );
  mkdirp( projectFolder, function ( err ) {
    if (!!err) {
      return def.reject( err );
    }

    def.resolve( modules );
  } );

  return def.promise;
} )
.then( function ( modules ) {
  var actions = [ ];

  if (args.indexOf( 'backend' ) !== -1) {
    lib.utils.info( 'Setting up backend seed...' );
    actions.push( setupBackend( ) );
  }

  if (args.indexOf( 'frontend' ) !== -1) {
    lib.utils.info( 'Setting up frontend seed...' );
    actions.push( setupFrontend( ) );
  }

  return Promise.all( actions );
} )
.then( function( ) {
  var def = Promise.defer( );

  // we no longer need backend/frontend
  var filters = ['clever-backend', 'clever-frontend', 'backend', 'frontend'];
  filters.forEach( function ( filter ) {
    var find = args.indexOf( filter );
    if (find > -1) {
      args.splice( find, 1 );
    }
  } );

  if (args.length < 1 ) {
    process.nextTick( function ( ) {
      def.resolve( );
    } );
  } else {
    lib.utils.info( 'Installing additional modules...' );

    setupModules( args ).then( function ( ) {
      def.resolve( );
    }, function ( err ) {
      def.reject( err );
    } );
  }

  return def.promise;
} )
.then( function( ) {
  lib.utils.info( 'Installing necessary packages...' );
  return setupPackages( );
} )
.then( function( ) {
  lib.utils.success( 'Project ' + project + ' has been created in ' + projectFolder );
  process.exit( 0 );
} )
.catch( function ( err ) {
  lib.utils.fail( err );

  // remove the project folder if we failed...
  rimraf( projectFolder, function ( err ) {
    if (!!err) {
      console.error( err );
    }

    process.exit( 1 );
  } );
} )
