#!/usr/bin/env node

var program = require( 'commander' )
  , Promise = require( 'bluebird' )
  , path    = require( 'path' )
  , rimraf  = require( 'rimraf' )
  , fs      = require( 'fs' )
  , async   = require( 'async' )
  , _       = require( 'lodash' )
  , lib     = require( path.join( __dirname, '..', 'index' ) );

program.version( lib.pkg.version )
  .usage( '[options] [modules ...]' );

program.on( '--help', function ( ) {
  console.log( '  Examples:' );
  console.log( '    clever remove clever-background-tasks' );
  console.log( '    clever remove auth clever-background-tasks' );
  console.log( '' );
} );

program.parse( process.argv );

Promise.longStackTraces( );

if (program.args.length < 1) {
  program.help( );
}

function removeFromBundledDependencies ( backendPath, modules ) {
  var def     = Promise.defer( )
    , pkgPath = path.join( backendPath.moduleDir, 'package.json' )
    , pkg     = require( pkgPath );

  pkg.bundledDependencies = pkg.bundledDependencies || [ ];
  modules.forEach( function ( module ) {
    if (pkg.bundledDependencies.indexOf( module ) > -1) {
      pkg.bundledDependencies.splice( module, 1 );
    }
  } );

  fs.writeFile( pkgPath, JSON.stringify( pkg, null, '  ' ), function ( err ) {
    if (!!err) {
      return def.reject( err );
    }

    def.resolve( );
  } );

  return def.promise;
}

/**
 * Finds all of the modules within lib.project.locations()
 *
 * @param  {String[]} modules
 * @return {Promise}
 * @api private
 */

function findModules( modules ) {
  var def = Promise.defer( );

  lib.project.locations( )
  .then( function ( locations ) {
    var _modules = [];

    modules.forEach( function ( module ) {
      locations.forEach( function ( location ) {
        var moduleLocation = path.join( location.moduleDir, location.modulePath, module );
        if (fs.existsSync( moduleLocation )) {
          _modules.push( moduleLocation );
        }
      } );
    } );

    if (_modules.length < 1) {
      return def.reject( 'There are no modules to remove.' );
    }

    async.each( _modules, rimraf, function ( err ) {
      if (!!err) {
        return def.reject( err );
      }

      var backend = _.find( locations, function ( location ) {
        return location.name === "backend";
      } );

      if (typeof backend === "undefined") {
        return def.resolve( );
      }

      removeFromBundledDependencies( backend, modules )
      .then( function ( ) {
        def.resolve( );
      }, function ( err ) {
        def.reject( err );
      } );
    } );
  } );

  return def.promise;
}

findModules( program.args )
.then( function ( ) {
  lib.utils.success( 'Modules have been removed from your project.' );
}, lib.utils.error );
