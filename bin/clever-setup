#!/usr/bin/env node

GLOBAL.lib = require( (require('path')).join( __dirname, '..', 'lib' ) );

var program   = require( 'commander' )
  , Promise   = require( 'bluebird' )
  , path      = require( 'path' )
  , async     = require( 'async' )
  , spawn     = require( 'child_process' ).spawn
  , exec      = require( 'child_process' ).exec
  , fs        = require( 'fs' )
  , _         = require( 'lodash' );

program
  .option( '--skip-protractor', 'Skips installing protractor' )
  .version( lib.pkg.version );

program.on( '--help', function ( ) {
  console.log( '  Description:' );
  console.log( '' );
  console.log( '    Installs all NPM and Bower components for each module as well as building bundleDependencies.');
  console.log( '    This command will also install Protractor unless explicitly skipping.' );
  console.log( '' );
  console.log( '  Examples:' );
  console.log( '' );
  console.log( '    clever setup' );
  console.log( '' );
} );

program.parse( process.argv );

/**
 * Installs Bower and NPM (including modules within the seeds) packages
 *
 * @param {Object} projectFolder Path to a CleverStack seed file from util.locations.get( )
 * @return {Promise}
 * @api private
 */

function setupPackages( projectFolder ) {
  var def = Promise.defer( )
    , _path = projectFolder.moduleDir;

  lib.utils.info( 'Installing NPM packages for ' + _path );
  var proc = spawn( 'npm', [ 'install' ], { cwd: _path } )
    , err = '';

  proc.stderr.on('data', function ( data ) {
    err += data + '';
  } );

  proc.on( 'close', function ( code ) {
    if (code !== 0) {
      return def.reject( err );
    }

    lib.utils.success( 'Finished installing NPM packages for ' + _path );

    var modulesFolder = path.join( projectFolder.moduleDir, projectFolder.modulePath )
      , modules = [ ];

    if (fs.existsSync( modulesFolder )) {
      modules = fs.readdirSync( modulesFolder );
      var keep = modules.indexOf( '.gitkeep' );
      if (keep > -1) {
        modules.splice( keep, 1 );
      }

      lib.utils.warn( 'Installing module NPMs for ' + _path );
    }

    async.each( modules, function ( m, next ) {
      lib.project.installModule( {
        moduleDir: modulesFolder,
        modulePath: ''
      }, path.resolve( path.join( projectFolder.moduleDir, projectFolder.modulePath, m ) ) )
      .then( function ( ) {
        next( );
      }, next )
    },
    function ( err ) {
      if (!!err) {
        return fn( err );
      }

      if (modules.length > 0) {
        lib.utils.success( 'Finished installing module NPMs' );
      }

      var bowerPath = path.join( projectFolder.moduleDir, 'bower.json' );

      // backend folder?
      if (!fs.existsSync( bowerPath ) ) {
        return def.resolve( );
      }

      lib.project.installBowerComponents( projectFolder )
      .then( function ( ) {
        //todo: Separate this into it's own function
        lib.utils.info( 'Building frontend' );

        exec( 'grunt bootstrap', { cwd: _path }, function ( err, stderr ) {
          if (!!err || stderr.trim( ) !== "") {
            return def.reject( err || stderr.trim( ) );
          }

          exec( 'grunt build', { cwd: _path }, function ( _err, _stderr ) {
            if (!!_err || _stderr.trim( ) !== "") {
              return def.reject( _err || _stderr.trim( ) );
            }

            lib.utils.success( 'Finished building frontend' );

            if (program.skipProtractor === true) {
              return def.resolve( );
            }

            lib.utils.info( 'Installing protractor for frontend...' );

            var proProc = spawn( 'npm', [ 'run-script', 'setup-protractor' ], { cwd: _path } )
              , procErr = '';

            proProc.stderr.on( 'data', function ( data ) {
              procErr += data + '';
            } );

            proProc.on( 'close', function ( code ) {
              if (code !== 0) {
                return def.reject( procErr );
              }

              def.resolve( );
            } );
          } );
        } );
      }, function ( err ) {
        def.reject( err );
      } );
    } );
  } );

  return def.promise;
}

lib.util.locations.get( ).then( function ( projects ) {
  var backend = _.find( projects, function ( p ) {
    return p.name === "backend";
  } );

  var frontend = _.find( projects, function ( p ) {
    return p.name === "frontend";
  } );

  if (typeof backend === "undefined" && typeof frontend === "undefined") {
    lib.utils.fail( 'Couldn\'t find a backend or frontend seed for CleverStack within', process.cwd( ) );
  }

  async.each( projects, function ( project, next ) {
    setupPackages( project )
    .then( function ( ) {
      next( );
    }, function ( err ) {
      next( err );
    } );
  },
  function ( err ) {
    if (!!err) {
      lib.utils.fail( err );
      process.exit( 1 );
    }

    lib.utils.success( 'Successfully installed all necessary packages' );
    process.exit( 0 );
  } );
} );
